!include ..\sources.inc

TARGETNAME                      =   ConhostV2
TARGETTYPE                      =   DYNLINK
UMTYPE                          =   windows

# We must define DLLDEF_OBJECTS because the methods defined in our exports file (.def file)
# are generated during creation of a different library module. This directive tells the linker
# to pick up the potential exports from there.
DLLDEF_OBJECTS                  =   $(OBJECT_ROOT)\windows\core\console\open\src\host\lib\$(O)\conhostv2.lib \

SYSTEM_COMPATIBLE_ASSEMBLY_VERSION_00=$(SYSTEM_COMPATIBLE_ASSEMBLY_VERSION).0.0
SXS_MANIFEST_DEFINES            =  $(SXS_MANIFEST_DEFINES) \
    -DSYSTEM_COMPATIBLE_ASSEMBLY_VERSION_00_A="\"$(SYSTEM_COMPATIBLE_ASSEMBLY_VERSION_00)\"" \

!IF $(WIN64)
LINKER_STACKSIZE                =   /STACK:262144,32768
!ELSE
LINKER_STACKSIZE                =   /STACK:262144,12288
!ENDIF

SOURCES                         =   $(SOURCES)\
                                    ..\res.rc \
                                    ..\main.cpp \

SXS_ASSEMBLY_NAME               =   Microsoft.Windows.ConsoleHostV2
SXS_ASSEMBLY_LANGUAGE_INDEPENDENT=1
SXS_MANIFEST                    =   ConhostV2.dll.Manifest
SXS_MANIFEST_IN_RESOURCES       =   1
SXS_NO_BINPLACE                 =   1

CMI_USE_VERSION_XML             =   1

O_MANIFESTS                     =   \
                                    $(OBJ_PATH)\$(O)\SystemDefault.man \
                                    ConhostV2.man

INCLUDES                        =   $(INCLUDES); \
                                    $(OBJ_PATH)\$(O)

NTTARGETFILE0                   =   \
                                    $(O_MANIFESTS)

DLOAD_ERROR_HANDLER             =   kernelbase