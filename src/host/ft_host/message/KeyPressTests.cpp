/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/
#include "precomp.h"

#include "..\..\inc\consoletaeftemplates.hpp"

#include <memory>
#include <utility>
#include <iostream>

class KeyPressTests
{
    TEST_CLASS(KeyPressTests);

    // TODO: MSFT: 10187614 - Fix this test or the console code.
    //TEST_METHOD(TestAltGr)
    //{
    //    Log::Comment(L"Testing that alt-gr behavior hasn't changed");
    //    BOOL successBool;
    //    HWND hwnd = GetConsoleWindow();
    //    VERIFY_IS_NOT_NULL(hwnd);
    //    HANDLE inputHandle = GetStdHandle(STD_INPUT_HANDLE);
    //    DWORD events = 0;

    //    // flush input buffer
    //    FlushConsoleInputBuffer(inputHandle);
    //    successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
    //    VERIFY_IS_TRUE(!!successBool);
    //    VERIFY_ARE_EQUAL(events, 0);

    //    // send alt-gr + q keypress (@ on german keyboard)
    //    DWORD repeatCount = 1;
    //    SendMessage(hwnd,
    //                WM_CHAR,
    //                0x51, // q
    //                repeatCount | HIWORD(KF_EXTENDED | KF_ALTDOWN));
    //    // make sure the the keypresses got processed
    //    events = 0;
    //    successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
    //    VERIFY_IS_TRUE(!!successBool);
    //    VERIFY_IS_GREATER_THAN(events, 0u, NoThrowString().Format(L"%d", events));
    //    std::unique_ptr<INPUT_RECORD[]> inputBuffer = std::make_unique<INPUT_RECORD[]>(1);
    //    VERIFY_WIN32_BOOL_SUCCEEDED_RETURN(PeekConsoleInput(inputHandle,
    //                                                        inputBuffer.get(),
    //                                                        1,
    //                                                        &events));
    //    VERIFY_ARE_EQUAL(events, 1);

    //    INPUT_RECORD expectedEvent;
    //    expectedEvent.EventType = KEY_EVENT;
    //    expectedEvent.Event.KeyEvent.bKeyDown = !!true;
    //    expectedEvent.Event.KeyEvent.wRepeatCount = 1;
    //    expectedEvent.Event.KeyEvent.wVirtualKeyCode = 0;
    //    expectedEvent.Event.KeyEvent.wVirtualScanCode = 0;
    //    expectedEvent.Event.KeyEvent.dwControlKeyState = 32;
    //    expectedEvent.Event.KeyEvent.uChar.UnicodeChar = L'Q';
    //    // compare values against those that have historically been
    //    // returned with the same arguments to SendMessage
    //    VERIFY_ARE_EQUAL(expectedEvent, inputBuffer[0]);
    //}

    TEST_METHOD(TestCoalesceSameKeyPress)
    {
        Log::Comment(L"Testing that key events are properly coalesced when the same key is pressed repeatedly");
        BOOL successBool;
        HWND hwnd = GetConsoleWindow();
        VERIFY_IS_NOT_NULL(hwnd);
        HANDLE inputHandle = GetStdHandle(STD_INPUT_HANDLE);
        DWORD events = 0;

        // flush input buffer
        FlushConsoleInputBuffer(inputHandle);
        successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
        VERIFY_IS_TRUE(!!successBool);
        VERIFY_ARE_EQUAL(events, 0);

        // send a bunch of 'a' keypresses to the console
        DWORD repeatCount = 1;
        const unsigned int messageSendCount = 1000;
        for (unsigned int i = 0; i < messageSendCount; ++i)
        {
            SendMessage(hwnd,
                        WM_CHAR,
                        0x41,
                        repeatCount);
        }

        // make sure the the keypresses got processed and coalesced
        events = 0;
        successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
        VERIFY_IS_TRUE(!!successBool);
        VERIFY_IS_GREATER_THAN(events, 0u, NoThrowString().Format(L"%d", events));
        std::unique_ptr<INPUT_RECORD[]> inputBuffer = std::make_unique<INPUT_RECORD[]>(1);
        PeekConsoleInput(inputHandle,
                         inputBuffer.get(),
                         1,
                         &events);
        VERIFY_ARE_EQUAL(events, 1);
        VERIFY_ARE_EQUAL(inputBuffer[0].EventType, KEY_EVENT);
        VERIFY_ARE_EQUAL(inputBuffer[0].Event.KeyEvent.wRepeatCount, messageSendCount, NoThrowString().Format(L"%d", inputBuffer[0].Event.KeyEvent.wRepeatCount));
    }


    TEST_METHOD(TestCtrlUpDown)
    {
        Log::Comment(L"Testing the right number of input events is generated by Ctrl+Key press");
        BOOL successBool;
        HWND hwnd = GetConsoleWindow();
        VERIFY_IS_NOT_NULL(hwnd);
        HANDLE inputHandle = GetStdHandle(STD_INPUT_HANDLE);
        DWORD events = 0;

        // flush input buffer
        FlushConsoleInputBuffer(inputHandle);
        successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
        VERIFY_IS_TRUE(!!successBool);
        VERIFY_ARE_EQUAL(events, 0);

        // send a bunch of 'a' keypresses to the console
        DWORD repeatCount = 1;
        const unsigned int messageSendCount = 1000;
        for (unsigned int i = 0; i < messageSendCount; ++i)
        {
            SendMessage(hwnd,
                        WM_CHAR,
                        0x41,
                        repeatCount);
        }

        // make sure the the keypresses got processed and coalesced
        events = 0;
        successBool = GetNumberOfConsoleInputEvents(inputHandle, &events);
        VERIFY_IS_TRUE(!!successBool);
        VERIFY_IS_GREATER_THAN(events, 0u, NoThrowString().Format(L"%d", events));

        std::unique_ptr<INPUT_RECORD[]> inputBuffer = std::make_unique<INPUT_RECORD[]>(16);
        PeekConsoleInput(inputHandle,
                         inputBuffer.get(),
                         4,
                         &events);
        VERIFY_ARE_EQUAL(events, 4);
        VERIFY_ARE_EQUAL(inputBuffer[0].EventType, KEY_EVENT);
        VERIFY_ARE_EQUAL(inputBuffer[0].Event.KeyEvent.wRepeatCount, messageSendCount, NoThrowString().Format(L"%d", inputBuffer[0].Event.KeyEvent.wRepeatCount));
    }

};