namespace Onecore.Windows.Core.Console.Open.Src.Tools.Nihilist {

    export declare const qualifier: WdgBuild.StandardPlatformsQualifier;

    const dotDot = d`${srcRoot}\onecore\windows\core\console\open\src\tools`;

    const o = d`${objRoot}\onecore\windows\core\console\open\src\tools\nihilist\${buildAlt}`;

    const prePass = LegacyBuild.build({
        template: template_NMake,
        classification: "test",
        targetPass: "prePass",
        
        consumes: [
            f`autogen.bp`,
            f`autogen.bp`,
            f`nihilist.vcxproj`,
            f`product.pbxproj`,
        ],
    });

    const pass1 = LegacyBuild.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass1",
        
        consumes: [
            f`autogen.bp`,
            f`autogen.bp`,
            f`main.cpp`,
            f`nihilist.vcxproj`,
            f`product.pbxproj`,
            f`${objRoot}\${buildAlt}\onecorefeaturestaging.inc`,

            prePass,

            MsWinCrts.Public.Internal.Sdk.Inc.Ucrt.header,
            MsWinCrts.Public.Sdk.Inc.Ucrt.header,
            MsWinOnecoreBase.Public.Shared.Inc.header,
            MsWinOnecoreNet.Public.Sdk.Inc.header,
            MsWinOnecoreSdkTools.Public.Internal.Onecoresdktools.Inc.header,
            MsWinOnecoreSdkTools.Public.Internal.Sdk.Inc.header,
            MsWinOnecoreSdkTools.Public.Shared.Inc.header,
            MsWinOnecoreShell.Public.Sdk.Inc.idl,
            MsWinOnecore_ApiSet.Public.Sdk.Inc.Mincore.header,
            MsWinOnecore_MinKernel.Private.Internal.Minwin.Priv_sdk.Inc.idl,
            MsWinOnecore_MinKernel.Public.Internal.Base.Inc.header,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.idl,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.Minwin.header,
            MsWinOnecore_MinKernel.Public.Shared.Inc.header,
            MsWinOnecore_MinKernel.Public.Shared.Inc.Minwin.header,
            Public.Sdk.Inc.header,
            Public.Sdk.Inc.idl,
            Public.Shared.Inc.header,
        ],
        
        produces: [
            p`${binRoot}\blg\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-tools-nihilist-nmake_to_mbs_pass1.props.br`,
            p`${binRoot}\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-tools-nihilist-nmake_to_mbs_pass1.props`,
            p`${o}\main.obj`,
            p`${o}\nmake_to_mbs_pass1.props`,
        ],
    });

    const pass2 = LegacyBuild.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass2",
        
        consumes: [
            f`autogen.bp`,
            f`autogen.bp`,
            f`main.cpp`,
            f`nihilist.vcxproj`,
            f`product.pbxproj`,
            f`res.rc`,
            f`${objRoot}\${buildAlt}\onecorefeaturestaging.inc`,
            f`${srcRoot}\build\scripts\fixtsversionstringappend.cmd`,

            pass1,
            prePass,

            MsWinCrts.Public.Internal.Sdk.Lib.Ucrt.library,
            MsWinOnecoreBase.Public.Shared.Inc.header,
            MsWinOnecoreMerged.Public.Sdk.Lib.Mincore.library,
            MsWinOnecoreShell.Public.Sdk.Inc.idl,
            MsWinOnecore_MinKernel.Public.Internal.Sdk.Lib.library,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.idl,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.Minwin.header,
            MsWinOnecore_MinKernel.Public.Sdk.Lib.library,
            MsWinOnecore_MinKernel.Public.Sdk.Lib.Minwin.V1_9.library,
            MsWinOnecore_MinKernel.Public.Shared.Inc.header,
            Public.Sdk.Inc.idl,

            ...addIf(isBuildArm32 || isBuildArm64, () => [
                    MsWinCrts.Public.Sdk.Lib.library,
                ]),
            ...addIf(isBuildDebug && isBuildCommonArchitecture, () => [
                    MsWinCrts.Public.Internal.Sdk.Lib.library,
                ]),
        ],
        
        produces: [
            p`${binRoot}\blg\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-tools-nihilist-nmake_to_mbs_pass2.props.br`,
            p`${binRoot}\blg\unittests\nihilist.exe.br`,
            p`${binRoot}\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-tools-nihilist-nmake_to_mbs_pass2.props`,
            p`${binRoot}\symbols.pri\unittests\exe\nihilist.pdb`,
            p`${binRoot}\unittests\nihilist.exe`,
            p`${o}\nihilist.exe`,
            p`${o}\nihilist.pdb`,
            p`${o}\nmake_to_mbs_pass2.props`,
            p`${o}\res.res`,
        ],
    });

    const pass3 = LegacyBuild.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass3",
        tags: [
            "Packages",
        ],
        
        consumes: [
            f`autogen.bp`,
            f`autogen.bp`,
            f`nihilist.vcxproj`,

            pass1,
            pass2,
            prePass,

            ...addIf(
                isBuildRelease,
                () => [
                    f`product.pbxproj`,
                    f`sources.pkg.xml`,
                    f`${binRoot}\msbuildprops\localization.txt`,
                    f`${objRoot}\${buildAlt}\__bldlanguage__.props`,
                    f`${objRoot}\${buildAlt}\__bldlanguageoverride__.props`,
                    f`${objRoot}\${buildAlt}\modularbuildglobalbuildsession.props`,
                    f`${srcRoot}\onecore\windows\project.props`,
                    f`${srcRoot}\public\sdk\inc\ntverp.h`,
                ]
            ),
            ...addIf(
                (isBuildRelease && isBuildArm32 && MsWinBuild.isOfficialBuild) || (isBuildRelease && isBuildArm64 && MsWinBuild.isOfficialBuild) || (isBuildRelease && isBuildX64 && MsWinBuild.isOfficialBuild) || (isBuildRelease && isBuildX86 && MsWinBuild.isOfficialBuild),
                (
                )
                => [
                    MsWinOnecore_Pkg.BinPublic.Imagingtools.content,
                ]
            ),
            ...addIf(isBuildRelease && isBuildCommonArchitecture, () => [
                    MsDevClr_Pkgv45.Clr_Pkg.V45.Public.Sdk.Ref.Clr45.metadata,
                ]),
        ],
        
        produces: [
            ...addIf(
                isBuildRelease,
                () => [
                    p`${binRoot}\blg\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.cab.br`,
                    p`${binRoot}\blg\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.man.dsm.xml.br`,
                    p`${binRoot}\blg\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.spkg.br`,
                    p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.cab`,
                    p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.man.dsm.xml`,
                    p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft.console.tools.nihilist.spkg`,
                    p`${o}\microsoft.console.tools.nihilist.cab`,
                    p`${o}\microsoft.console.tools.nihilist.man.dsm.xml`,
                    p`${o}\microsoft.console.tools.nihilist.spkg`,
                ]
            ),
        ],
    });

    export const bin_PrebuiltTest_content = extractPart(pass3, p`${binRoot}\prebuilt\test\${buildArch}\${buildType}`);
}