namespace Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser {

    export declare const qualifier: {
        platform: "arm32" | "arm64" | "x64" | "x86",
        configuration: "debug" | "release",
        codeAnalysisMode: "simpleAnalysis" | "disabled",
    };

    const dotDot = d`${srcRoot}\onecore\windows\core\console\open\src\terminal\parser`;

    const o = d`${objRoot}\onecore\windows\core\console\open\src\terminal\parser\ut_parser\${buildAlt}`;

    const prePass = LegacySdk.build({
        template: template_NMake,
        classification: "test",
        targetPass: "prePass",
        
        consumes: [
            f`autogen.bp`,
            f`parser.unittests.vcxproj`,
            f`product.pbxproj`,
        ],
    });

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.pass1

    export const pass1 = LegacySdk.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass1",
        
        consumes: [
            f`autogen.bp`,
            f`parser.unittests.vcxproj`,
            f`product.pbxproj`,
            f`statemachinetest.cpp`,
            f`${dotDot}\ascii.hpp`,
            f`${dotDot}\precomp.cpp`,
            f`${dotDot}\precomp.h`,
            f`${dotDot}\statemachine.cpp`,
            f`${dotDot}\statemachine.hpp`,
            f`${dotDot}\telemetry.cpp`,
            f`${dotDot}\telemetry.hpp`,
            f`${dotDot}\termdispatch.hpp`,
            f`${dotDot}\tracing.cpp`,
            f`${dotDot}\tracing.hpp`,
            f`${objRoot}\${buildAlt}\onecorefeaturestaging.inc`,
            f`${srcRoot}\build\scripts\generatetestlist.cmd`,

            prePass,

            $.Public.Sdk.Inc.header,
            $.Public.Sdk.Inc.idl,
            $.Public.Shared.Inc.header,
            MsWinCrts.Public.Internal.Sdk.Inc.Ucrt.header,
            MsWinCrts.Public.Internal.Sdk.Inc.Ucrt.Stl120.header,
            MsWinCrts.Public.Sdk.Inc.Ucrt.header,
            MsWinCrts.Public.Sdk.Inc.Ucrt.Sys.header,
            MsWinOnecoreBase.Public.Sdk.Inc.header,
            MsWinOnecoreBase.Public.Shared.Inc.header,
            MsWinOnecoreCom.Public.Shared.Inc.header,
            MsWinOnecoreNet.Public.Sdk.Inc.header,
            MsWinOnecoreSdkTools.Public.Internal.Onecoresdktools.Inc.header,
            MsWinOnecoreSdkTools.Public.Internal.Sdk.Inc.header,
            MsWinOnecoreSdkTools.Public.Shared.Inc.header,
            MsWinOnecoreShell.Public.Sdk.Inc.idl,
            MsWinOnecore_ApiSet.Public.Sdk.Inc.Mincore.header,
            MsWinOnecore_MinKernel.Private.Internal.Minwin.Priv_sdk.Inc.idl,
            MsWinOnecore_MinKernel.Private.Internal.Minwin.Priv_sdk.Inc.Telemetry.header,
            MsWinOnecore_MinKernel.Public.Internal.Base.Inc.header,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.idl,
            MsWinOnecore_MinKernel.Public.Sdk.Inc.Minwin.header,
            MsWinOnecore_MinKernel.Public.Shared.Inc.header,
            MsWinOnecore_MinKernel.Public.Shared.Inc.Minwin.header,
            MsWinOnecore_Taef.Public.Internal.Sdktools.Inc.Wextest.Cue.header,
        ],
        
        produces: [
            p`${binRoot}\blg\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-terminal-parser-ut_parser-nmake_to_mbs_pass1.props.br`,
            p`${binRoot}\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-terminal-parser-ut_parser-nmake_to_mbs_pass1.props`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.exp`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.lib`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.testmd_metadata`,
            p`${o}\nmake_to_mbs_pass1.props`,
            p`${o}\pch_hdr.src`,
            p`${o}\precomp.obj`,
            p`${o}\precomp.pch`,
            p`${o}\statemachine.obj`,
            p`${o}\statemachinetest.obj`,
            p`${o}\telemetry.obj`,
            p`${o}\tracing.obj`,
        ],
    });

    const pass2 = LegacySdk.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass2",
        
        consumes: [
            f`autogen.bp`,
            f`parser.unittests.vcxproj`,
            f`product.pbxproj`,
            f`statemachinetest.cpp`,
            f`${dotDot}\precomp.cpp`,
            f`${dotDot}\precomp.h`,
            f`${dotDot}\statemachine.cpp`,
            f`${dotDot}\telemetry.cpp`,
            f`${dotDot}\tracing.cpp`,
            f`${objRoot}\${buildAlt}\onecorefeaturestaging.inc`,
            f`${srcRoot}\build\scripts\testmdgen.cmd`,
            f`${srcRoot}\public\sdk\inc\ntverp.h`,
            MsWinCrts.Public.Internal.Sdk.Lib.Ucrt.library,
            isBuildDebug && isBuildCommonArchitecture ? MsWinCrts.Public.Internal.Sdk.Lib.library : undefined,
            isBuildArm32 || isBuildArm64 ? MsWinCrts.Public.Sdk.Lib.library : undefined,
            MsWinOnecoreMerged.Public.Sdk.Lib.Onecore.V1_7.library,
            pass1,
            prePass,
            MsWinOnecore_MinKernel.Public.Internal.Sdk.Lib.library,
            MsWinOnecore_MinKernel.Public.Sdk.Lib.Minwin.V1_8.library,
            MsWinOnecore_MinKernel.Public.Sdk.Lib.library,
            MsWinOnecore_Taef.Public.Internal.Sdktools.Lib.Wextest.Cue.tlb,
        ]
        .filter(e => e !== undefined),
        
        produces: [
            p`${binRoot}\blg\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-terminal-parser-ut_parser-nmake_to_mbs_pass2.props.br`,
            p`${binRoot}\blg\prebuilt\test\${buildArch}\${buildType}\microsoft.console.virtualterminal.parser.unittests.testmd.br`,
            p`${binRoot}\blg\prebuilt\windows\microsoft.console.virtualterminal.parser.unittests.testmd.br`,
            p`${binRoot}\blg\unittests\microsoft.console.virtualterminal.parser.unittests.dll.br`,
            p`${binRoot}\msbuildprops\nmakeprops\onecore-windows-core-console-open-src-terminal-parser-ut_parser-nmake_to_mbs_pass2.props`,
            p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft.console.virtualterminal.parser.unittests.testmd`,
            p`${binRoot}\prebuilt\windows\microsoft.console.virtualterminal.parser.unittests.testmd`,
            p`${binRoot}\symbols.pri\unittests\dll\microsoft.console.virtualterminal.parser.unittests.pdb`,
            p`${binRoot}\unittests\microsoft.console.virtualterminal.parser.unittests.dll`,
            p`${o}\microsoft-console-virtualterminal-parser-unittests.spkg.meta.xml`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.dll`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.pdb`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.testmd`,
            p`${o}\microsoft.console.virtualterminal.parser.unittests.wm.xml`,
            p`${o}\nmake_to_mbs_pass2.props`,
        ],
    });

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_BlgMsbuildpropsNmakeprops_content

    @@public
    export const bin_BlgMsbuildpropsNmakeprops_content = MicrosoftSdk.SdkCombine.evaluate({
        outputDirectory: d`${binRoot}\blg\msbuildprops\nmakeprops`,
        sources: [
            pass1.directories.get(p`${binRoot}\blg\msbuildprops\nmakeprops`),
            pass2.directories.get(p`${binRoot}\blg\msbuildprops\nmakeprops`),
        ],
    });

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_BlgPrebuiltTest_content

    export const bin_BlgPrebuiltTest_content = pass2.directories.get(p`${binRoot}\blg\prebuilt\test\${buildArch}\${buildType}`);

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_BlgPrebuiltWindows_content

    export const bin_BlgPrebuiltWindows_content = pass2.directories.get(p`${binRoot}\blg\prebuilt\windows`);

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_BlgUnittests_content

    export const bin_BlgUnittests_content = pass2.directories.get(p`${binRoot}\blg\unittests`);

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_MsbuildpropsNmakeprops_content

    @@public
    export const bin_MsbuildpropsNmakeprops_content = MicrosoftSdk.SdkCombine.evaluate({
        outputDirectory: d`${binRoot}\msbuildprops\nmakeprops`,
        sources: [
            pass1.directories.get(p`${binRoot}\msbuildprops\nmakeprops`),
            pass2.directories.get(p`${binRoot}\msbuildprops\nmakeprops`),
        ],
    });

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_PrebuiltWindows_content

    export const bin_PrebuiltWindows_content = pass2.directories.get(p`${binRoot}\prebuilt\windows`);

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_SymbolspriUnittestsDll_content

    export const bin_SymbolspriUnittestsDll_content = pass2.directories.get(p`${binRoot}\symbols.pri\unittests\dll`);

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_Unittests_content

    export const bin_Unittests_content = pass2.directories.get(p`${binRoot}\unittests`);

    const pass3 = LegacySdk.build({
        template: template_NMake,
        classification: "test",
        targetPass: "pass3",
        tags: [
            "Packages",
        ],
        
        consumes: [
            f`autogen.bp`,
            f`parser.unittests.vcxproj`,
            pass1,
            pass2,
            prePass,
            isBuildRelease && isBuildCommonArchitecture ? MsWinOnecore_Pkg.BinPublic.Imagingtools.content : undefined,
            ...addIf(
                isBuildRelease,
                () => [
                    f`product.pbxproj`,
                    f`${srcRoot}\build\scripts\signer.cmd`,
                    f`${srcRoot}\onecore\windows\project.props`,
                    f`${srcRoot}\public\sdk\inc\ntverp.h`,
                ]
            ),
        ]
        .filter(e => e !== undefined),
        
        produces: [
            ...addIf(
                isBuildRelease,
                () => [
                    p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft-console-virtualterminal-parser-unittests.cab`,
                    p`${binRoot}\prebuilt\test\${buildArch}\${buildType}\microsoft-console-virtualterminal-parser-unittests.man.dsm.xml`,
                ]
            ),
        ],
    });

    // DEF: Onecore.Windows.Core.Console.Open.Src.Terminal.Parser.Ut_parser.bin_PrebuiltTest_content

    @@public
    export const bin_PrebuiltTest_content = MicrosoftSdk.SdkCombine.evaluate({
        outputDirectory: d`${binRoot}\prebuilt\test\${buildArch}\${buildType}`,
        sources: [
            pass2.directories.get(p`${binRoot}\prebuilt\test\${buildArch}\${buildType}`),
            isBuildRelease && isBuildCommonArchitecture ? pass3.directories.get(p`${binRoot}\prebuilt\test\${buildArch}\${buildType}`) : undefined,
        ]
        .filter(e => e !== undefined),
    });
}